{"version":3,"sources":["components/CalcBtn.js","components/ResetBtn.js","components/Inputs.js","components/App.js","index.js"],"names":["CalcBtn","props","Button","onClick","calculate","ResetBtn","basic","reset","validInput","validSeq","RomanNum","M","CM","D","CD","C","XC","L","XL","X","IX","V","IV","I","initialState","value1","value1Arr","value2","value2Arr","operator","result","hold","val1Empty","val2Empty","err","Inputs","state","handleValue","e","data","target","value","match","placeholder","setState","toUpperCase","convertToArr","Array","from","convertToArabic","preventDefault","converted1","converted2","index1","index2","i","length","push","splice","forEach","a","reducer","c","doCalc","reduce","displayError","convertToRoman","intResult","parseInt","resultString","toString","resultArr","numberArr","convertedResult","reverse","Number","finalResult","showErr","printResult","operatorChange","handleReset","this","options","key","text","Icon","link","name","icon","faDivide","onSubmit","className","Input","onChange","Label","color","pointing","style","display","Dropdown","selection","compact","React","Component","App","useState","setValue","setErr","ReactDOM","render","document","querySelector"],"mappings":"6UASeA,EANC,SAACC,GAEb,OAAQ,kBAACC,EAAA,EAAD,CAAQC,QAASF,EAAMG,WAAvB,cCKGC,EAPE,SAACJ,GAEd,OAAQ,kBAACC,EAAA,EAAD,CAAQI,OAAK,EAACH,QAASF,EAAMM,OAA7B,U,6DCKNC,EAAa,sBAEbC,EAAW,6DAEXC,EAAW,CAAEC,EAAG,IAAMC,GAAI,IAAKC,EAAG,IAAKC,GAAI,IAAKC,EAAG,IAAKC,GAAI,GAAIC,EAAG,GAAIC,GAAI,GAAIC,EAAG,GAAIC,GAAI,EAAGC,EAAG,EAAGC,GAAI,EAAGC,EAAG,GAE7GC,EAAe,CAEjBC,OAAQ,GACRC,UAAW,GAEXC,OAAQ,GACRC,UAAW,GAEXC,SAAU,IAEVC,OAAQ,KAERC,MAAM,EAENC,WAAW,EACXC,WAAW,EACXC,KAAK,GA+XMC,E,2MA1XXC,MAAQZ,E,EAERa,YAAc,SAACC,EAAGC,GAEVD,EAAEE,OAAOC,MAAMC,MAAMlC,KAEI,YAArB+B,EAAKI,aACL,EAAKC,SAAS,CAAEnB,OAAQc,EAAKE,MAAMI,gBAC/B,kBAAM,EAAKC,aAAa,MAGP,YAArBP,EAAKI,aACL,EAAKC,SAAS,CAAEjB,OAAQY,EAAKE,MAAMI,gBAC/B,kBAAM,EAAKC,aAAa,Q,EAKxCA,aAAe,SAACR,GAEZ,EAAKM,SAAS,CAAElB,UAAWqB,MAAMC,KAAK,EAAKZ,MAAMX,QAASM,MAAM,EAAOG,KAAK,IAC5E,EAAKU,SAAS,CAAEhB,UAAWmB,MAAMC,KAAK,EAAKZ,MAAMT,QAASI,MAAM,EAAOG,KAAK,IAGlE,IAANI,GACA,EAAKM,SAAS,CAAEZ,WAAW,IACrB,IAANM,GACA,EAAKM,SAAS,CAAEX,WAAW,K,EAGnCgB,gBAAkB,SAACX,GACfA,EAAEY,iBADmB,MAEkC,EAAKd,MAApDX,EAFa,EAEbA,OAAQE,EAFK,EAELA,OAAQD,EAFH,EAEGA,UAAWE,EAFd,EAEcA,UAGnC,GALqB,EAEyBG,KAI1C,EAAK3B,gBADT,CAcA,IARA,IAAM+C,EAAa,GACbC,EAAa,GAGbC,EAAS,GACTC,EAAS,GAGNC,EAAI,EAAGA,EAAI7B,EAAU8B,OAAQD,IACb,MAAjB7B,EAAU6B,IAAmC,MAArB7B,EAAU6B,EAAI,KACtC7B,EAAU6B,GAAK7B,EAAU6B,GAAK7B,EAAU6B,EAAI,GAC5CF,EAAOI,KAAKF,EAAI,IAEC,MAAjB7B,EAAU6B,IAAmC,MAArB7B,EAAU6B,EAAI,KACtC7B,EAAU6B,GAAK7B,EAAU6B,GAAK7B,EAAU6B,EAAI,GAC5CF,EAAOI,KAAKF,EAAI,IAEC,MAAjB7B,EAAU6B,IAAmC,MAArB7B,EAAU6B,EAAI,KACtC7B,EAAU6B,GAAK7B,EAAU6B,GAAK7B,EAAU6B,EAAI,GAC5CF,EAAOI,KAAKF,EAAI,IAEC,MAAjB7B,EAAU6B,IAAmC,MAArB7B,EAAU6B,EAAI,KACtC7B,EAAU6B,GAAK7B,EAAU6B,GAAK7B,EAAU6B,EAAI,GAC5CF,EAAOI,KAAKF,EAAI,IAEC,MAAjB7B,EAAU6B,IAAmC,MAArB7B,EAAU6B,EAAI,KACtC7B,EAAU6B,GAAK7B,EAAU6B,GAAK7B,EAAU6B,EAAI,GAC5CF,EAAOI,KAAKF,EAAI,IAEC,MAAjB7B,EAAU6B,IAAmC,MAArB7B,EAAU6B,EAAI,KACtC7B,EAAU6B,GAAK7B,EAAU6B,GAAK7B,EAAU6B,EAAI,GAC5CF,EAAOI,KAAKF,EAAI,IAIxB,IAAK,IAAIA,EAAI,EAAGA,EAAI3B,EAAU4B,OAAQD,IACb,MAAjB3B,EAAU2B,IAAmC,MAArB3B,EAAU2B,EAAI,KACtC3B,EAAU2B,GAAK3B,EAAU2B,GAAK3B,EAAU2B,EAAI,GAC5CD,EAAOG,KAAKF,EAAI,IAEC,MAAjB3B,EAAU2B,IAAmC,MAArB3B,EAAU2B,EAAI,KACtC3B,EAAU2B,GAAK3B,EAAU2B,GAAK3B,EAAU2B,EAAI,GAC5CD,EAAOG,KAAKF,EAAI,IAEC,MAAjB3B,EAAU2B,IAAmC,MAArB3B,EAAU2B,EAAI,KACtC3B,EAAU2B,GAAK3B,EAAU2B,GAAK3B,EAAU2B,EAAI,GAC5CD,EAAOG,KAAKF,EAAI,IAEC,MAAjB3B,EAAU2B,IAAmC,MAArB3B,EAAU2B,EAAI,KACtC3B,EAAU2B,GAAK3B,EAAU2B,GAAK3B,EAAU2B,EAAI,GAC5CD,EAAOG,KAAKF,EAAI,IAEC,MAAjB3B,EAAU2B,IAAmC,MAArB3B,EAAU2B,EAAI,KACtC3B,EAAU2B,GAAK3B,EAAU2B,GAAK3B,EAAU2B,EAAI,GAC5CD,EAAOG,KAAKF,EAAI,IAEC,MAAjB3B,EAAU2B,IAAmC,MAArB3B,EAAU2B,EAAI,KACtC3B,EAAU2B,GAAK3B,EAAU2B,GAAK3B,EAAU2B,EAAI,GAC5CD,EAAOG,KAAKF,EAAI,IAKxB,IAAK,IAAIA,EAAI7B,EAAU8B,OAAS,EAAGD,GAAK,IAAKA,EACzC,IAAK,IAAIjB,EAAI,EAAGA,EAAIe,EAAOG,OAAQlB,IAC3BiB,IAAMF,EAAOf,IACbZ,EAAUgC,OAAOH,EAAG,GAGhC,IAAK,IAAIA,EAAI3B,EAAU4B,OAAS,EAAGD,GAAK,IAAKA,EACzC,IAAK,IAAIjB,EAAI,EAAGA,EAAIgB,EAAOE,OAAQlB,IAC3BiB,IAAMD,EAAOhB,IACbV,EAAU8B,OAAOH,EAAG,GAKhC7B,EAAUiC,SAAQ,SAAArB,GAAC,OAAIa,EAAWM,KAAK/C,EAAS4B,OAChDV,EAAU+B,SAAQ,SAAArB,GAAC,OAAIc,EAAWK,KAAK/C,EAAS4B,OAEhD,EAAKM,SAAS,CAAEd,OAAQ,KAAMJ,UAAWyB,EAAYvB,UAAWwB,IAC5D,WAGI,GAAe,KAAX3B,GAA4B,KAAXE,EAOjB,MANe,KAAXF,GACA,EAAKmB,SAAS,CAAEZ,WAAW,SAEhB,KAAXL,GACA,EAAKiB,SAAS,CAAEX,WAAW,KAKnC,EAAK7B,iB,EAIjBA,U,sBAAY,wCAAAwD,EAAA,+DAEmD,EAAKxB,MAAxDX,EAFA,EAEAA,OAAQE,EAFR,EAEQA,OAAQD,EAFhB,EAEgBA,UAAWE,EAF3B,EAE2BA,UAAWC,EAFtC,EAEsCA,SAGxCgC,EAAU,SAACD,EAAGE,GAAJ,OAAUF,EAAIE,GAE9B,EAAKC,OAAL,sBAAc,sBAAAH,EAAA,2DAENlC,EAAU8B,OAAS,GAAK5B,EAAU4B,OAAS,GAFrC,qDAMN/B,EAAOiB,MAAMjC,KAAakB,EAAOe,MAAMjC,GANjC,sBAOEoB,EAPF,OAQG,MARH,OAWG,MAXH,OAcG,MAdH,QAiBG,MAjBH,+BASE,EAAKe,SAAS,CAAEd,OAAQJ,EAAUsC,OAAOH,GAAWjC,EAAUoC,OAAOH,KATvE,mCAYE,EAAKjB,SAAS,CAAEd,OAAQJ,EAAUsC,OAAOH,GAAWjC,EAAUoC,OAAOH,KAZvE,oCAeE,EAAKjB,SAAS,CAAEd,OAAQJ,EAAUsC,OAAOH,GAAWjC,EAAUoC,OAAOH,KAfvE,oCAkBE,EAAKjB,SAAS,CAAEd,OAAQJ,EAAUsC,OAAOH,GAAWjC,EAAUoC,OAAOH,KAlBvE,+DAwBN,EAAKjB,SAAS,CAAEb,MAAM,IAxBhB,+BA2BN,EAAKa,SAAS,CAAEd,OAAQ,KAAMI,KAAK,IAAQ,kBAAM,EAAK+B,kBA3BhD,+DAPN,SAuCF,EAAKF,SAvCH,YA0CJ,EAAK3B,MAAMN,OAAS,MAAQ,EAAKM,MAAMF,KA1CnC,uBA2CJ,EAAKU,SAAS,CAAEV,IAAK,QAAS,kBAAM,EAAK+B,kBA3CrC,0BA+CR,EAAKC,iBA/CG,2C,EAkDZA,eAAiB,WACb,IAGMC,EAAYC,SAAS,EAAKhC,MAAMN,QAChCuC,EAAeF,EAAUG,WACzBC,EAAYxB,MAAMC,KAAKqB,GAGvBG,EAAY,GAGZC,EAAkB,GAIxB,GAAIN,EAAY,EACZ,EAAKvB,SAAS,CAAEV,IAAK,QAAS,kBAAM,EAAK+B,sBAD7C,CAaA,GAPAM,EAAUG,UAAUf,SAAQ,SAAArB,GACxBkC,EAAUf,KAAKkB,OAAOrC,OAMtBkC,EAAU,GAAK,EACf,IAAK,IAAIjB,EAAI,EAAGA,EAAIiB,EAAU,GAAIjB,IAC9BkB,EAAgBhB,KAAK,KAM7B,GAHqB,IAAjBe,EAAU,IACVC,EAAgBhB,KAAK,MAErBe,EAAU,IAAM,GAAKA,EAAU,GAAK,EAAG,CACvC,IAAK,IAAIjB,EAAI,EAAGA,EAAIiB,EAAU,GAAK,EAAGjB,IAClCkB,EAAgBhB,KAAK,KAEzBgB,EAAgBhB,KAAK,KAMzB,GAJqB,IAAjBe,EAAU,IACVC,EAAgBhB,KAAK,MAGrBe,EAAU,GAAK,EACf,IAAK,IAAIjB,EAAI,EAAGA,EAAIiB,EAAU,GAAIjB,IAC9BkB,EAAgBhB,KAAK,KAM7B,GAHqB,IAAjBe,EAAU,IACVC,EAAgBhB,KAAK,MAErBe,EAAU,IAAM,GAAKA,EAAU,GAAK,EAAG,CACvC,IAAK,IAAIjB,EAAI,EAAGA,EAAIiB,EAAU,GAAK,EAAGjB,IAClCkB,EAAgBhB,KAAK,KAEzBgB,EAAgBhB,KAAK,KAMzB,GAJqB,IAAjBe,EAAU,IACVC,EAAgBhB,KAAK,MAGrBe,EAAU,GAAK,EACf,IAAK,IAAIjB,EAAI,EAAGA,EAAIiB,EAAU,GAAIjB,IAC9BkB,EAAgBhB,KAAK,KAM7B,GAHqB,IAAjBe,EAAU,IACVC,EAAgBhB,KAAK,MAErBe,EAAU,IAAM,GAAKA,EAAU,GAAK,EAAG,CACvC,IAAK,IAAIjB,EAAI,EAAGA,EAAIiB,EAAU,GAAK,EAAGjB,IAClCkB,EAAgBhB,KAAK,KAEzBgB,EAAgBhB,KAAK,KAMzB,GAJqB,IAAjBe,EAAU,IACVC,EAAgBhB,KAAK,MAGrBe,EAAU,GAAK,EACf,IAAK,IAAIjB,EAAI,EAAGA,EAAIiB,EAAU,GAAIjB,IAC9BkB,EAAgBhB,KAAK,KAI7B,IAAImB,EAEAH,EAAgBjB,OAAS,IACzBoB,EAAcH,EAAgBC,UAAUV,QA3F5B,SAACJ,EAAGE,GAAJ,OAAUF,EAAIE,MAgG9B,EAAK7D,MAAM4E,QAAQ,EAAKzC,MAAMF,KAEzB,EAAKE,MAAMF,KACZ,EAAKjC,MAAM6E,YAAYF,K,EAK/BX,aAAe,WACP,EAAK7B,MAAMF,KACX,EAAKjC,MAAM4E,QAAQ,EAAKzC,MAAMF,M,EAItC6C,eAAiB,SAACzC,EAAGC,GACjB,EAAKK,SAAS,CAAEf,SAAUU,EAAKE,MAAOP,KAAK,K,EAG/C8C,YAAc,WACV,EAAKpC,SAASpB,I,wEAGR,IAAD,EACgCyD,KAAK7C,MAAlCX,EADH,EACGA,OAAQE,EADX,EACWA,OAAQE,EADnB,EACmBA,SAGlBqD,EAAU,CACZ,CAAEC,IAAK,EAAGC,KAAM,kBAACC,EAAA,EAAD,CAAMC,MAAI,EAACC,KAAK,SAAW9C,MAAO,KAClD,CAAE0C,IAAK,EAAGC,KAAM,kBAACC,EAAA,EAAD,CAAMC,MAAI,EAACC,KAAK,UAAY9C,MAAO,KACnD,CAAE0C,IAAK,EAAGC,KAAM,kBAACC,EAAA,EAAD,CAAMC,MAAI,EAACC,KAAK,UAAY9C,MAAO,KACnD,CAAE0C,IAAK,EAAGC,KAAM,kBAAC,IAAD,CAAiBI,KAAMC,MAAchD,MAAO,MAGhE,OACI,0BAAMiD,SAAUT,KAAK7E,WAEjB,yBAAKuF,UAAU,oBAEX,yBAAKA,UAAU,mBAEX,kBAACC,EAAA,EAAD,CAAOC,SAAUZ,KAAK5C,YAAaI,MAAOhB,EAAQkB,YAAY,YAG9D,kBAACmD,EAAA,EAAD,CACIxF,OAAK,EACLyF,MAAM,MACNC,UAAQ,EACRC,MAAO,CAAEC,QAASjB,KAAK7C,MAAMJ,UAAY,QAAU,SAJvD,yBAWJ,kBAACmE,EAAA,EAAD,CACI1D,MAAOZ,EACPuE,WAAS,EACTC,SAAO,EACPR,SAAUZ,KAAKF,eACfG,QAASA,IAGb,yBAAKS,UAAU,mBAEX,kBAACC,EAAA,EAAD,CAAOC,SAAUZ,KAAK5C,YAAaI,MAAOd,EAAQgB,YAAY,YAG9D,kBAACmD,EAAA,EAAD,CACIxF,OAAK,EACLyF,MAAM,MACNC,UAAQ,EACRC,MAAO,CAAEC,QAASjB,KAAK7C,MAAMH,UAAY,QAAU,SAJvD,0BAaR,yBAAK0D,UAAU,iBAEX,kBAAC,EAAD,CAAUpF,MAAO0E,KAAKD,cACtB,kBAAC,EAAD,CAAS5E,UAAW6E,KAAKhC,wB,GAnXxBqD,IAAMC,WCCZC,G,OAhCH,WAAM,MAGYC,mBAAS,IAHrB,mBAGPhE,EAHO,KAGAiE,EAHA,OAKQD,oBAAS,GALjB,mBAKPvE,EALO,KAKFyE,EALE,KAed,OACI,yBAAKhB,UAAU,kBACX,kBAAC,EAAD,CACIb,YAXQ,SAAChD,GACjB4E,GAAS,kBAAM5E,MAWP+C,QARM,SAACvC,GACfqE,GAAO,kBAAMrE,QAST,yBAAKqD,UAAU,oBACC,QAARzD,EAAgB,eAChBA,EAAM,8CACNO,MCxBpBmE,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,cAAc,Y","file":"static/js/main.f3734d4c.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Button } from 'semantic-ui-react'\r\n\r\nconst CalcBtn = (props) => {\r\n\r\n    return  <Button onClick={props.calculate}>Calculate</Button>\r\n\r\n}\r\n\r\nexport default CalcBtn;\r\n","import React from 'react';\r\nimport {Button} from 'semantic-ui-react';\r\n\r\nconst ResetBtn = (props) => {\r\n\r\n    return  <Button basic onClick={props.reset}>Reset</Button>\r\n\r\n}\r\n\r\n\r\nexport default ResetBtn;\r\n","import React from 'react';\r\nimport CalcBtn from './CalcBtn.js';\r\nimport ResetBtn from './ResetBtn';\r\nimport { Input, Dropdown, Label, Icon } from 'semantic-ui-react';\r\nimport './styles/Inputs.css';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faDivide } from '@fortawesome/free-solid-svg-icons';\r\n\r\n//valid input characters\r\nconst validInput = \"^[IVXLCDMivxlcdm]*$\";\r\n//valid sequence for calculation\r\nconst validSeq = \"^(M{0,3})(D?C{0,3}|CM|CD)(L?X{0,3}|XC|XL)(V?I{0,3}|IX|IV)$\";\r\n//values to convert to\r\nconst RomanNum = { M: 1000, CM: 900, D: 500, CD: 400, C: 100, XC: 90, L: 50, XL: 40, X: 10, IX: 9, V: 5, IV: 4, I: 1 };\r\n\r\nconst initialState = {\r\n\r\n    value1: '',\r\n    value1Arr: [],\r\n\r\n    value2: '',\r\n    value2Arr: [],\r\n\r\n    operator: '+',\r\n\r\n    result: null,\r\n\r\n    hold: false,\r\n\r\n    val1Empty: false,\r\n    val2Empty: false,\r\n    err: false\r\n}\r\n\r\nclass Inputs extends React.Component {\r\n\r\n    state = initialState;\r\n\r\n    handleValue = (e, data) => {\r\n\r\n        if (e.target.value.match(validInput)) {\r\n            //first input\r\n            if (data.placeholder === \"Input 1\")\r\n                this.setState({ value1: data.value.toUpperCase() },\r\n                    () => this.convertToArr(1)\r\n                )\r\n            //second input\r\n            if (data.placeholder === \"Input 2\")\r\n                this.setState({ value2: data.value.toUpperCase() },\r\n                    () => this.convertToArr(2)\r\n                )\r\n        }\r\n    }\r\n\r\n    convertToArr = (e) => {\r\n        //converts the input strings into an array\r\n        this.setState({ value1Arr: Array.from(this.state.value1), hold: false, err: false })\r\n        this.setState({ value2Arr: Array.from(this.state.value2), hold: false, err: false })\r\n\r\n        //handle error labels for respective inputs\r\n        if (e === 1)\r\n            this.setState({ val1Empty: false })\r\n        if (e === 2)\r\n            this.setState({ val2Empty: false })\r\n    }\r\n\r\n    convertToArabic = (e) => {\r\n        e.preventDefault()\r\n        const { value1, value2, value1Arr, value2Arr, hold } = this.state;\r\n\r\n        //prevent further array modifications (and calculations) if input hasn't been modified after displaying the result\r\n        if (hold) {\r\n            this.calculate();\r\n            return;\r\n        }\r\n\r\n        //Arrays for converted Arabic numbers\r\n        const converted1 = []\r\n        const converted2 = []\r\n\r\n        //Stores indexes for concactonated characters, for removing excess values later\r\n        const index1 = []\r\n        const index2 = []\r\n\r\n        //check if any values should be concatenated (for both input fields)\r\n        for (let i = 0; i < value1Arr.length; i++) {\r\n            if (value1Arr[i] === \"I\" && value1Arr[i + 1] === \"V\") {\r\n                value1Arr[i] = value1Arr[i] + value1Arr[i + 1]\r\n                index1.push(i + 1)\r\n            }\r\n            if (value1Arr[i] === \"I\" && value1Arr[i + 1] === \"X\") {\r\n                value1Arr[i] = value1Arr[i] + value1Arr[i + 1]\r\n                index1.push(i + 1)\r\n            }\r\n            if (value1Arr[i] === \"X\" && value1Arr[i + 1] === \"L\") {\r\n                value1Arr[i] = value1Arr[i] + value1Arr[i + 1]\r\n                index1.push(i + 1)\r\n            }\r\n            if (value1Arr[i] === \"X\" && value1Arr[i + 1] === \"C\") {\r\n                value1Arr[i] = value1Arr[i] + value1Arr[i + 1]\r\n                index1.push(i + 1)\r\n            }\r\n            if (value1Arr[i] === \"C\" && value1Arr[i + 1] === \"D\") {\r\n                value1Arr[i] = value1Arr[i] + value1Arr[i + 1]\r\n                index1.push(i + 1)\r\n            }\r\n            if (value1Arr[i] === \"C\" && value1Arr[i + 1] === \"M\") {\r\n                value1Arr[i] = value1Arr[i] + value1Arr[i + 1]\r\n                index1.push(i + 1)\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < value2Arr.length; i++) {\r\n            if (value2Arr[i] === \"I\" && value2Arr[i + 1] === \"V\") {\r\n                value2Arr[i] = value2Arr[i] + value2Arr[i + 1]\r\n                index2.push(i + 1)\r\n            }\r\n            if (value2Arr[i] === \"I\" && value2Arr[i + 1] === \"X\") {\r\n                value2Arr[i] = value2Arr[i] + value2Arr[i + 1]\r\n                index2.push(i + 1)\r\n            }\r\n            if (value2Arr[i] === \"X\" && value2Arr[i + 1] === \"L\") {\r\n                value2Arr[i] = value2Arr[i] + value2Arr[i + 1]\r\n                index2.push(i + 1)\r\n            }\r\n            if (value2Arr[i] === \"X\" && value2Arr[i + 1] === \"C\") {\r\n                value2Arr[i] = value2Arr[i] + value2Arr[i + 1]\r\n                index2.push(i + 1)\r\n            }\r\n            if (value2Arr[i] === \"C\" && value2Arr[i + 1] === \"D\") {\r\n                value2Arr[i] = value2Arr[i] + value2Arr[i + 1]\r\n                index2.push(i + 1)\r\n            }\r\n            if (value2Arr[i] === \"C\" && value2Arr[i + 1] === \"M\") {\r\n                value2Arr[i] = value2Arr[i] + value2Arr[i + 1]\r\n                index2.push(i + 1)\r\n            }\r\n        }\r\n\r\n        //loop through an array in reverse to remove the excessive values after concatenating \r\n        for (let i = value1Arr.length - 1; i >= 0; --i) {\r\n            for (let e = 0; e < index1.length; e++) {\r\n                if (i === index1[e])\r\n                    value1Arr.splice(i, 1)\r\n            }\r\n        }\r\n        for (let i = value2Arr.length - 1; i >= 0; --i) {\r\n            for (let e = 0; e < index2.length; e++) {\r\n                if (i === index2[e])\r\n                    value2Arr.splice(i, 1)\r\n            }\r\n        }\r\n\r\n        //convert the Roman numbers into Arabic ones\r\n        value1Arr.forEach(e => converted1.push(RomanNum[e]))\r\n        value2Arr.forEach(e => converted2.push(RomanNum[e]))\r\n\r\n        this.setState({ result: null, value1Arr: converted1, value2Arr: converted2 },\r\n            () => {\r\n\r\n                //display error if either field is empty\r\n                if (value1 === '' || value2 === '') {\r\n                    if (value1 === '') {\r\n                        this.setState({ val1Empty: true })\r\n                    }\r\n                    if (value2 === '') {\r\n                        this.setState({ val2Empty: true })\r\n                    }\r\n                    return;\r\n                }\r\n\r\n                this.calculate()\r\n            })\r\n    }\r\n\r\n    calculate = async () => {\r\n\r\n        const { value1, value2, value1Arr, value2Arr, operator } = this.state;\r\n\r\n        //add the values of both inputs together before further calculations\r\n        const reducer = (a, c) => a + c;\r\n\r\n        this.doCalc = async () => {\r\n\r\n            if (value1Arr.length < 1 || value2Arr.length < 1)\r\n                return;\r\n\r\n            //check if both input values match RegEx valid sequence\r\n            if (value1.match(validSeq) && value2.match(validSeq)) {\r\n                switch (operator) {\r\n                    case '+':\r\n                        this.setState({ result: value1Arr.reduce(reducer) + value2Arr.reduce(reducer) })\r\n                        break;\r\n                    case '-':\r\n                        this.setState({ result: value1Arr.reduce(reducer) - value2Arr.reduce(reducer) })\r\n                        break;\r\n                    case '*':\r\n                        this.setState({ result: value1Arr.reduce(reducer) * value2Arr.reduce(reducer) })\r\n                        break;\r\n                    case '/':\r\n                        this.setState({ result: value1Arr.reduce(reducer) / value2Arr.reduce(reducer) })\r\n                        break;\r\n                    default:\r\n                        return;\r\n                }\r\n\r\n                this.setState({ hold: true })\r\n            } else {\r\n                //display error if aither field has invalid sequence that does not match RegEx sequence\r\n                this.setState({ result: null, err: true }, () => this.displayError())\r\n                return;\r\n            }\r\n        }\r\n\r\n        await this.doCalc()\r\n\r\n        //if value is out of upper range of Roman numbers\r\n        if (this.state.result > 3999 || this.state.err) {\r\n            this.setState({ err: \"OOR\" }, () => this.displayError());\r\n            return;\r\n        }\r\n\r\n        this.convertToRoman()\r\n    }\r\n\r\n    convertToRoman = () => {\r\n        const reducer = (a, c) => a + c;\r\n\r\n        //get the result without decimals and convert it to an array\r\n        const intResult = parseInt(this.state.result)\r\n        const resultString = intResult.toString()\r\n        const resultArr = Array.from(resultString)\r\n\r\n        //array of Arabic numerals\r\n        const numberArr = []\r\n\r\n        //array of roman numerals\r\n        const convertedResult = []\r\n\r\n\r\n        //if value is less than 0, display error and exit function\r\n        if (intResult < 1) {\r\n            this.setState({ err: \"OOR\" }, () => this.displayError())\r\n            return;\r\n        }\r\n\r\n        //push Arabic numbers into an array in reverse order before converting to Roman numerals\r\n        resultArr.reverse().forEach(e => {\r\n            numberArr.push(Number(e))\r\n        })\r\n\r\n\r\n        //Do the final conversion to Roman numerals\r\n        //-----0-9\r\n        if (numberArr[0] < 4) {\r\n            for (let i = 0; i < numberArr[0]; i++) {\r\n                convertedResult.push(\"I\")\r\n            }\r\n        }\r\n        if (numberArr[0] === 4) {\r\n            convertedResult.push(\"IV\")\r\n        }\r\n        if (numberArr[0] >= 5 && numberArr[0] < 9) {\r\n            for (let i = 0; i < numberArr[0] - 5; i++) {\r\n                convertedResult.push(\"I\")\r\n            }\r\n            convertedResult.push(\"V\")\r\n        }\r\n        if (numberArr[0] === 9) {\r\n            convertedResult.push(\"IX\")\r\n        }\r\n        //------10-90\r\n        if (numberArr[1] < 4) {\r\n            for (let i = 0; i < numberArr[1]; i++) {\r\n                convertedResult.push(\"X\")\r\n            }\r\n        }\r\n        if (numberArr[1] === 4) {\r\n            convertedResult.push(\"XL\")\r\n        }\r\n        if (numberArr[1] >= 5 && numberArr[1] < 9) {\r\n            for (let i = 0; i < numberArr[1] - 5; i++) {\r\n                convertedResult.push(\"X\")\r\n            }\r\n            convertedResult.push(\"L\")\r\n        }\r\n        if (numberArr[1] === 9) {\r\n            convertedResult.push(\"XC\")\r\n        }\r\n        //------100-900\r\n        if (numberArr[2] < 4) {\r\n            for (let i = 0; i < numberArr[2]; i++) {\r\n                convertedResult.push(\"C\")\r\n            }\r\n        }\r\n        if (numberArr[2] === 4) {\r\n            convertedResult.push(\"CD\")\r\n        }\r\n        if (numberArr[2] >= 5 && numberArr[2] < 9) {\r\n            for (let i = 0; i < numberArr[2] - 5; i++) {\r\n                convertedResult.push(\"C\")\r\n            }\r\n            convertedResult.push(\"D\")\r\n        }\r\n        if (numberArr[2] === 9) {\r\n            convertedResult.push(\"CM\")\r\n        }\r\n        //------1000-3000\r\n        if (numberArr[3] < 4) {\r\n            for (let i = 0; i < numberArr[3]; i++) {\r\n                convertedResult.push(\"M\")\r\n            }\r\n        }\r\n\r\n        let finalResult;\r\n\r\n        if (convertedResult.length > 0) {\r\n            finalResult = convertedResult.reverse().reduce(reducer)\r\n        }\r\n\r\n\r\n        //send results to parent for display, along with the error status\r\n        this.props.showErr(this.state.err)\r\n\r\n        if (!this.state.err) {\r\n            this.props.printResult(finalResult)\r\n        }\r\n    }\r\n\r\n    //send error status to parent in case of error\r\n    displayError = () => {\r\n        if (this.state.err)\r\n            this.props.showErr(this.state.err)\r\n    }\r\n\r\n    //handle operator change\r\n    operatorChange = (e, data) => {\r\n        this.setState({ operator: data.value, err: false })\r\n    }\r\n\r\n    handleReset = () => {\r\n        this.setState(initialState);\r\n    }\r\n\r\n    render() {\r\n        const { value1, value2, operator } = this.state;\r\n\r\n        //operator dropdown options\r\n        const options = [\r\n            { key: 1, text: <Icon link name='plus' />, value: '+' },\r\n            { key: 2, text: <Icon link name='minus' />, value: '-' },\r\n            { key: 3, text: <Icon link name='times' />, value: '*' },\r\n            { key: 4, text: <FontAwesomeIcon icon={faDivide} />, value: '/' },\r\n        ]\r\n\r\n        return (\r\n            <form onSubmit={this.calculate}>\r\n\r\n                <div className=\"inputs-container\">\r\n\r\n                    <div className=\"input-container\">\r\n\r\n                        <Input onChange={this.handleValue} value={value1} placeholder='Input 1' />\r\n\r\n                        {/* error label */}\r\n                        <Label\r\n                            basic\r\n                            color='red'\r\n                            pointing\r\n                            style={{ display: this.state.val1Empty ? \"block\" : \"none\" }}\r\n                        >\r\n                            Please enter a value\r\n                        </Label>\r\n\r\n                    </div>\r\n\r\n                    <Dropdown\r\n                        value={operator}\r\n                        selection\r\n                        compact\r\n                        onChange={this.operatorChange}\r\n                        options={options}\r\n                    />\r\n\r\n                    <div className=\"input-container\">\r\n\r\n                        <Input onChange={this.handleValue} value={value2} placeholder='Input 2' />\r\n\r\n                        {/* error label */}\r\n                        <Label\r\n                            basic\r\n                            color='red'\r\n                            pointing\r\n                            style={{ display: this.state.val2Empty ? \"block\" : \"none\" }}\r\n                        >\r\n                            Please enter a value\r\n                        </Label>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                <div className=\"btn-container\">\r\n\r\n                    <ResetBtn reset={this.handleReset} />\r\n                    <CalcBtn calculate={this.convertToArabic} />\r\n\r\n                </div>\r\n\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Inputs;\r\n","import React, { useState } from 'react';\r\nimport Inputs from \"./Inputs\";\r\nimport \"./styles/App.css\";\r\n\r\nconst App = () => {\r\n\r\n    //final result\r\n    const [value, setValue] = useState('')\r\n    //error state\r\n    const [err, setErr] = useState(false)\r\n\r\n    const handlePrint = (result) => {\r\n        setValue(() => result)\r\n    }\r\n\r\n    const handleErr = (e) => {\r\n        setErr(() => e)\r\n    }\r\n\r\n    return (\r\n        <div className=\"main-container\">\r\n            <Inputs\r\n                printResult={handlePrint}\r\n                showErr={handleErr}\r\n            />\r\n            <div className=\"result-container\">\r\n                {   err === \"OOR\" ? \"Out of Range\" :\r\n                    err ? \"Please enter a valid sequence of characters\" :\r\n                    value\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom'\r\nimport App from './components/App';\r\n\r\nReactDOM.render(\r\n    <App/>,\r\n    document.querySelector(\"#root\")\r\n);\r\n"],"sourceRoot":""}